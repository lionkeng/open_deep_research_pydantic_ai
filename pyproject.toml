[project]
name = "open-deep-research-with-pydantic-ai"
version = "0.1.0"
description = "A Python project for deep research using Pydantic AI"
readme = "README.md"
authors = [{ name = "Keng Lim", email = "keng@anewgo.com" }]
requires-python = ">=3.12"
dependencies = [
  "pydantic>=2.5.0",
  "pydantic-ai>=0.0.10",
  "fastapi>=0.115.0",
  "uvicorn>=0.35.0",
  "httpx>=0.28.0",
  "logfire>=2.5.0",
  "click>=8.1.0",
  "rich>=13.9.0",
  "sse-starlette>=2.1.0",
  "python-multipart>=0.0.20",
  "python-dotenv>=1.1.1"
]

[project.optional-dependencies]
dev = [
  "pytest>=8.4.1",
  "pytest-cov>=4.1.0",
  "pytest-asyncio>=0.23.0",
  "ruff>=0.6.0",
  "ipython>=8.18.0",
]
docs = [
  "mkdocs>=1.5.0",
  "mkdocs-material>=9.5.0",
  "mkdocstrings[python]>=0.24.0",
]
cli = [
  "httpx-sse>=0.4.0", # SSE client support for HTTP mode
]

[project.scripts]
deep-research = "cli:cli"
deep-research-server = "api.main:main"
test = "pytest:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]
[tool.hatch.build.targets.wheel.sources]
"src" = ""

[tool.hatch.build.targets.sdist]
include = [
    "src/**/*.py",
    "src/py.typed",
]

[tool.ruff]
line-length = 100
target-version = "py312"
exclude = ["tests/**"]

[tool.ruff.lint]
select = [
  "E",  # pycodestyle errors
  "W",  # pycodestyle warnings
  "F",  # pyflakes
  "I",  # isort
  "B",  # flake8-bugbear
  "C4", # flake8-comprehensions
  "UP", # pyupgrade
]
ignore = []

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pyright]
pythonVersion = "3.12"
typeCheckingMode = "strict"
exclude = ["tests/**", "test_*.py"]
stubPath = "stubs"  # For custom type stubs if needed

# Framework-specific configurations for Pydantic-AI
reportGeneralTypeIssues = "error"
reportPrivateUsage = "warning"  # Allow some private usage in framework integration

# Downgrade external library type issues to warnings
reportUnknownMemberType = "warning"
reportUnknownArgumentType = "warning"
reportUnknownVariableType = "warning"
reportUnknownParameterType = "warning"
reportMissingTypeArgument = "warning"
reportAny = "warning"

# Keep strict error checking for code quality
reportMissingImports = "error"
reportMissingTypeStubs = "warning"
reportUnusedImport = "error"
reportUnusedClass = "error"
reportUnusedFunction = "information"  # Lowered for Pydantic-AI tools (called dynamically)
reportUnusedVariable = "error"
reportDuplicateImport = "error"
reportWildcardImportFromLibrary = "error"
reportOptionalMemberAccess = "error"
reportOptionalCall = "error"
reportOptionalIterable = "error"
reportOptionalContextManager = "error"
reportOptionalOperand = "error"
reportTypedDictNotRequiredAccess = "error"
reportUntypedFunctionDecorator = "warning"
reportUntypedClassDecorator = "warning"
reportUntypedBaseClass = "warning"

# Additional framework-specific adjustments
reportCallIssue = "error"
reportArgumentType = "warning"  # More lenient for complex generic scenarios
reportUntypedNamedTuple = "error"
reportConstantRedefinition = "error"
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportInvalidStringEscapeSequence = "error"
reportUnknownLambdaType = "warning"
reportInvalidTypeVarUse = "error"
reportCallInDefaultInitializer = "error"
reportUnnecessaryIsInstance = "warning"
reportUnnecessaryCast = "warning"
reportUnnecessaryComparison = "warning"
reportAssertAlwaysTrue = "warning"
reportSelfClsParameterName = "error"
reportImplicitStringConcatenation = "warning"
reportInvalidStubStatement = "error"
reportIncompleteStub = "warning"
reportUnsupportedDunderAll = "error"
reportUnusedCallResult = "warning"
reportUnusedCoroutine = "error"
reportUnusedExpression = "warning"
reportUnnecessaryTypeIgnoreComment = "warning"
reportMatchNotExhaustive = "error"

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["src"]
addopts = [
  "--cov=src",
  "--cov-report=term-missing",
  "--cov-report=html",
  "-v",
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if __name__ == .__main__.:",
  "raise NotImplementedError",
  "pass",
  "except ImportError:",
]

[tool.logfire]
# Suppress configuration warning until logfire.configure() is called
ignore_no_config = true
# suppress logging to stderr/stdout by default
console = false

[dependency-groups]
dev = [
  "pre-commit>=4.3.0",
  "pyright>=1.1.403",
  "pytest>=8.4.1",
  "pytest-asyncio>=1.1.0",
  "pytest-cov>=6.2.1",
  "pytest-mock>=3.14.1",
  "ruff>=0.12.8",
]
